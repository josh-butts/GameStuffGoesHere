<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Gear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = .5;
hsp = 0;
vsp = 0;
jumpspeed = 4;
movespeed = 4.5;
sfx = audio_emitter_create();
audio_emitter_gain(sfx, 0.3);
dead = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_jump = keyboard_check_pressed(ord('W'));
key_up = -keyboard_check(ord('W'));
key_down = keyboard_check(ord('S'));
move = key_left + key_right;
vert_move = key_up + key_down;

//react to inputs
if (place_meeting(x,y,obj_GearWall) || (place_meeting(x,y,obj_GearWallLeft)))
{
    scr_GearWallMovement();
}
else
{
    scr_NormalMovement();
    
    //sound
    if (hsp != 0 &amp;&amp; !audio_is_playing(snd_PlayerRoll) &amp;&amp; place_meeting(x,y+1,obj_Wall))
    {
        audio_play_sound_on(sfx, snd_PlayerRoll, 0, 0);
    }
    else if(hsp = 0)
    {
        audio_stop_sound(snd_PlayerRoll);
    }
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_Wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_Wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_Wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_Wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//animation
scr_GearAnimation();

//death
/*if (dead)
{
    sprite_index = spr_GearDeath;
    image_speed = 1;
    if (image_index == 38)
    {
        instance_destroy(obj_Player);
        instance_create(96, 704, obj_Player);
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
